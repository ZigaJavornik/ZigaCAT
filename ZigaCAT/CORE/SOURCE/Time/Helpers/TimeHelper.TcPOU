<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="TimeHelper" Id="{898778e9-e14d-073e-1ccd-a54910dd68f7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TimeHelper
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="TimeStructToString" Id="{09fa2c0a-67d6-0138-1e38-1f52cd3aef8c}">
      <Declaration><![CDATA[// Converts timestruct to a string using the provided time format and date/time seperator
METHOD TimeStructToString : Tc2_System.T_MaxString
VAR_INPUT
	timestructIn		: Tc2_Utilities.TIMESTRUCT;	// Timestruct provided
	timeFormat			: E_TimeFormat;	// Time format to apply to the timestruct conversion
	timeOfDaySeperator	: STRING(1);	// Specifies how time of day is split
	dateSeperator		: STRING(1);	// Specifies how date is split
	fillWithZeros		: BOOL;	// If set to true: month, day hour, minute and second will have 0 added when only a single digit is present
	IncludeMilliseconds	: BOOL; // If set to true, milliseconds will also be displayed in the result, else they are ignored
END_VAR

VAR
	year						: STRING;
	month						: STRING;
	day							: STRING;
	hour						: STRING;
	minute						: STRING;
	second						: STRING;
	milliseconds				: STRING;
	stringBuilder				: FB_StringBuilderBase;
	_ddmmyy						: STRING;
	_mmddyy						: STRING;
	_yymmdd						: STRING;
	_hhmmss						: STRING;
	resultWithoutMilliseconds	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[year := WORD_TO_STRING(timestructIn.wYear);
month := WORD_TO_STRING(timestructIn.wMonth);
day := WORD_TO_STRING(timestructIn.wDay);
hour := WORD_TO_STRING(timestructIn.wHour);
minute := WORD_TO_STRING(timestructIn.wMinute);
second := WORD_TO_STRING(timestructIn.wSecond);
milliseconds := WORD_TO_STRING(timestructIn.wMilliseconds);

IF fillWithZeros THEN
	IF Tc2_Standard.LEN(STR := month) < 2 THEN
		month := Tc2_Standard.CONCAT(STR1 := '0', STR2 := month);
	END_IF
	
	IF Tc2_Standard.LEN(STR := day) < 2 THEN
		day := Tc2_Standard.CONCAT(STR1 := '0', STR2 := day);
	END_IF
	
	IF Tc2_Standard.LEN(STR := hour) < 2 THEN
		hour := Tc2_Standard.CONCAT(STR1 := '0', STR2 := hour);
	END_IF
	
	IF Tc2_Standard.LEN(STR := minute) < 2 THEN
		minute := Tc2_Standard.CONCAT(STR1 := '0', STR2 := minute);
	END_IF
	
	IF Tc2_Standard.LEN(STR := second) < 2 THEN
		second := Tc2_Standard.CONCAT(STR1 := '0', STR2 := second);
	END_IF

	IF Tc2_Standard.LEN(STR := milliseconds) < 2 THEN
		second := Tc2_Standard.CONCAT(STR1 := '00', STR2 := second);
	ELSIF Tc2_Standard.LEN(STR := milliseconds) < 3 THEN
		second := Tc2_Standard.CONCAT(STR1 := '0', STR2 := second);
	END_IF
END_IF

_ddmmyy := stringBuilder.Reset()
	.AddString(day).AddString(dateSeperator)
	.AddString(month).AddString(dateSeperator)
	.AddString(year).AddString(dateSeperator)
	.Create();

_mmddyy := stringBuilder.Reset()
	.AddString(month).AddString(dateSeperator)
	.AddString(day).AddString(dateSeperator)
	.AddString(year).AddString(dateSeperator)
	.Create();

_yymmdd := stringBuilder.Reset()
	.AddString(year).AddString(dateSeperator)
	.AddString(month).AddString(dateSeperator)
	.AddString(day).AddString(dateSeperator)
	.Create();

_hhmmss := stringBuilder.Reset()
	.AddString(hour).AddString(timeOfDaySeperator)
	.AddString(minute).AddString(timeOfDaySeperator)
	.AddString(second).AddString(timeOfDaySeperator)
	.Create();
	
CASE timeFormat OF
	E_TimeFormat.DDMMYY:
		resultWithoutMilliseconds := _ddmmyy;
		
				
	E_TimeFormat.HHMMSS:
		resultWithoutMilliseconds := _hhmmss;
	
			
	E_TimeFormat.MMDDYY:
		resultWithoutMilliseconds := _mmddyy;

	E_TimeFormat.YYMMDD:	
		resultWithoutMilliseconds := _yymmdd;
		
	E_TimeFormat.DDMMYY_HHMMSS:
		resultWithoutMilliseconds := stringBuilder.Reset()
			.AddString(_ddmmyy)
			.AddString(' ')
			.AddString(_hhmmss)
			.Create();
		
	E_TimeFormat.MMDDYY_HHMMSS:
		resultWithoutMilliseconds := stringBuilder.Reset()
			.AddString(_mmddyy)
			.AddString(' ')
			.AddString(_hhmmss)
			.Create();	
			
	E_TimeFormat.YYMMDD_HHMMSS:
		resultWithoutMilliseconds := stringBuilder.Reset()
			.AddString(_yymmdd)
			.AddString(' ')
			.AddString(_hhmmss)
			.Create();				
END_CASE

IF NOT IncludeMilliseconds THEN
	TimeStructToString := resultWithoutMilliseconds;
	RETURN;
END_IF

TimeStructToString := stringBuilder.Reset()
	.AddString(resultWithoutMilliseconds)
	.AddString(milliseconds)
	.Create();

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>